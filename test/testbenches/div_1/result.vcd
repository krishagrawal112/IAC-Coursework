$date
	Wed Dec 15 00:04:14 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testing_tb $end
$var wire 32 ! writedata [31:0] $end
$var wire 1 " write $end
$var wire 32 # shifted_address [31:0] $end
$var wire 32 $ register_v0 [31:0] $end
$var wire 1 % read $end
$var wire 4 & byteenable [3:0] $end
$var wire 32 ' address [31:0] $end
$var wire 1 ( active $end
$var reg 1 ) clk $end
$var reg 32 * readdata [31:0] $end
$var reg 1 + reset $end
$var reg 1 , waitrequest $end
$scope module m1 $end
$var wire 1 ) clk $end
$var wire 32 - readdata [31:0] $end
$var wire 1 + reset $end
$var wire 1 , waitrequest $end
$var wire 1 . xorr $end
$var wire 1 / xori $end
$var wire 32 0 writedata [31:0] $end
$var wire 1 1 write_enable_ld $end
$var wire 1 2 write_enable_PC $end
$var wire 1 3 write_enable_ALU $end
$var wire 32 4 write_data_ld [31:0] $end
$var wire 32 5 write_data_PC [31:0] $end
$var wire 32 6 write_data_ALU [31:0] $end
$var wire 1 " write $end
$var wire 1 7 sw $end
$var wire 1 8 subu $end
$var wire 2 9 state [1:0] $end
$var wire 1 : srlv $end
$var wire 1 ; srl $end
$var wire 1 < srav $end
$var wire 1 = sra $end
$var wire 1 > sltu $end
$var wire 1 ? sltiu $end
$var wire 1 @ slti $end
$var wire 1 A slt $end
$var wire 1 B sllv $end
$var wire 1 C sll $end
$var wire 5 D shamt [4:0] $end
$var wire 1 E sh $end
$var wire 1 F sb $end
$var wire 5 G rt [4:0] $end
$var wire 5 H rs [4:0] $end
$var wire 32 I register_v0 [31:0] $end
$var wire 1 % read $end
$var wire 5 J rd [4:0] $end
$var wire 1 K rType $end
$var wire 1 L orr $end
$var wire 1 M ori $end
$var wire 1 N multu $end
$var wire 1 O mult $end
$var wire 1 P mtlo $end
$var wire 1 Q mthi $end
$var wire 1 R mflo $end
$var wire 1 S mfhi $end
$var wire 1 T lwr $end
$var wire 1 U lwl $end
$var wire 1 V lw $end
$var wire 1 W lui $end
$var wire 1 X link $end
$var wire 1 Y lhu $end
$var wire 1 Z lh $end
$var wire 1 [ lbu $end
$var wire 1 \ lb $end
$var wire 1 ] jr $end
$var wire 1 ^ jalr $end
$var wire 1 _ jal $end
$var wire 1 ` j $end
$var wire 32 a instruction [31:0] $end
$var wire 16 b immediate [15:0] $end
$var wire 1 c divu $end
$var wire 1 d div $end
$var wire 32 e data_rt [31:0] $end
$var wire 32 f data_rs [31:0] $end
$var wire 4 g byteenable_ld [3:0] $end
$var wire 4 h byteenable [3:0] $end
$var wire 1 i bne $end
$var wire 1 j bltzal $end
$var wire 1 k bltz $end
$var wire 1 l blez $end
$var wire 1 m bgtz $end
$var wire 1 n bgezal $end
$var wire 1 o bgez $end
$var wire 1 p beq $end
$var wire 1 q andr $end
$var wire 1 r andi $end
$var wire 1 s addu $end
$var wire 32 t address [31:0] $end
$var wire 1 u addiu $end
$var wire 1 ( active $end
$var wire 1 v STALL $end
$var wire 32 w PC [31:0] $end
$var wire 26 x J_address [25:0] $end
$scope module NXT $end
$var wire 32 y PC_out [31:0] $end
$var wire 1 ) clk $end
$var wire 1 + rst $end
$var wire 32 z write_data_PC [31:0] $end
$var wire 32 { sign_I_im [31:0] $end
$var wire 32 | r_t [31:0] $end
$var wire 32 } r_s [31:0] $end
$var wire 1 v STALL $end
$var wire 26 ~ J_intermidiete [25:0] $end
$var wire 1 ] JR $end
$var wire 1 ^ JALR $end
$var wire 1 _ JAL $end
$var wire 1 ` J $end
$var wire 16 !" I_intermidiete [15:0] $end
$var wire 1 i BNE $end
$var wire 1 j BLTZAL $end
$var wire 1 k BLTZ $end
$var wire 1 l BLEZ $end
$var wire 1 m BGTZ $end
$var wire 1 n BGEZAL $end
$var wire 1 o BGEZ $end
$var wire 1 p BEQ $end
$var reg 32 "" PC [31:0] $end
$var reg 32 #" PC_next [31:0] $end
$var reg 32 $" PC_next_next [31:0] $end
$var reg 1 ( active $end
$var reg 1 %" jump $end
$var reg 1 &" jump_addition $end
$var reg 32 '" jump_amount [31:0] $end
$var reg 1 X link $end
$var reg 2 (" state [1:0] $end
$var reg 1 2 write_enable_PC $end
$upscope $end
$scope module a1 $end
$var wire 1 ) clk $end
$var wire 2 )" state [1:0] $end
$var wire 32 *" zeroim [31:0] $end
$var wire 1 . xorr $end
$var wire 1 / xori $end
$var wire 1 8 subu $end
$var wire 1 : srlv $end
$var wire 1 ; srl $end
$var wire 1 < srav $end
$var wire 1 = sra $end
$var wire 1 > sltu $end
$var wire 1 ? sltiu $end
$var wire 1 @ slti $end
$var wire 1 A slt $end
$var wire 1 B sllv $end
$var wire 1 C sll $end
$var wire 32 +" signim [31:0] $end
$var wire 32 ," signedim [31:0] $end
$var wire 5 -" sa [4:0] $end
$var wire 1 L orr $end
$var wire 1 M ori $end
$var wire 1 N multu $end
$var wire 1 O mult $end
$var wire 1 P mtlo $end
$var wire 1 Q mthi $end
$var wire 1 R mflo $end
$var wire 1 S mfhi $end
$var wire 16 ." immediate [15:0] $end
$var wire 1 c divu $end
$var wire 1 d div $end
$var wire 1 q andr $end
$var wire 1 r andi $end
$var wire 1 s addu $end
$var wire 1 u addiu $end
$var wire 32 /" Rtsigned [31:0] $end
$var wire 32 0" Rtdata [31:0] $end
$var wire 32 1" Rssigned [31:0] $end
$var wire 32 2" Rsdata [31:0] $end
$var reg 32 3" data [31:0] $end
$var reg 32 4" datahi [31:0] $end
$var reg 32 5" datalo [31:0] $end
$var reg 32 6" hi [31:0] $end
$var reg 32 7" lo [31:0] $end
$var reg 64 8" multi [63:0] $end
$var reg 1 3 reg_writeenable $end
$upscope $end
$scope module d1 $end
$var wire 1 v STALL $end
$var wire 1 s addu $end
$var wire 1 q andr $end
$var wire 1 o bgez $end
$var wire 1 n bgezal $end
$var wire 1 m bgtz $end
$var wire 1 l blez $end
$var wire 1 k bltz $end
$var wire 1 j bltzal $end
$var wire 1 d div $end
$var wire 1 c divu $end
$var wire 1 ^ jalr $end
$var wire 1 ] jr $end
$var wire 1 S mfhi $end
$var wire 1 R mflo $end
$var wire 1 Q mthi $end
$var wire 1 P mtlo $end
$var wire 1 O mult $end
$var wire 1 N multu $end
$var wire 1 L orr $end
$var wire 1 C sll $end
$var wire 1 B sllv $end
$var wire 1 A slt $end
$var wire 1 > sltu $end
$var wire 1 = sra $end
$var wire 1 < srav $end
$var wire 1 ; srl $end
$var wire 1 : srlv $end
$var wire 1 8 subu $end
$var wire 1 , waitrequest $end
$var wire 1 . xorr $end
$var wire 1 / xori $end
$var wire 1 7 sw $end
$var wire 1 ? sltiu $end
$var wire 1 @ slti $end
$var wire 5 9" shamt [4:0] $end
$var wire 1 E sh $end
$var wire 1 F sb $end
$var wire 5 :" rt [4:0] $end
$var wire 5 ;" rs [4:0] $end
$var wire 5 <" rd [4:0] $end
$var wire 1 K rType $end
$var wire 1 M ori $end
$var wire 6 =" opcode [5:0] $end
$var wire 1 T lwr $end
$var wire 1 U lwl $end
$var wire 1 V lw $end
$var wire 1 W lui $end
$var wire 1 Y lhu $end
$var wire 1 Z lh $end
$var wire 1 [ lbu $end
$var wire 1 \ lb $end
$var wire 1 _ jal $end
$var wire 1 ` j $end
$var wire 32 >" instruction [31:0] $end
$var wire 16 ?" immediate [15:0] $end
$var wire 6 @" funct [5:0] $end
$var wire 1 i bne $end
$var wire 1 p beq $end
$var wire 1 r andi $end
$var wire 26 A" address [25:0] $end
$var wire 1 u addiu $end
$var reg 1 B" s $end
$upscope $end
$scope module l1 $end
$var wire 32 C" PC_in [31:0] $end
$var wire 1 ) clk $end
$var wire 32 D" instruction_out [31:0] $end
$var wire 1 \ lb $end
$var wire 1 [ lbu $end
$var wire 1 Z lh $end
$var wire 1 Y lhu $end
$var wire 1 W lui $end
$var wire 1 V lw $end
$var wire 1 U lwl $end
$var wire 1 T lwr $end
$var wire 32 E" mem_readdata [31:0] $end
$var wire 16 F" offset [15:0] $end
$var wire 5 G" rt [4:0] $end
$var wire 1 F sb $end
$var wire 1 E sh $end
$var wire 2 H" state [1:0] $end
$var wire 1 7 sw $end
$var wire 1 , waitrequest $end
$var wire 32 I" rt_data [31:0] $end
$var wire 32 J" rs_data [31:0] $end
$var wire 32 K" offset_sign_extended [31:0] $end
$var wire 32 L" mem_address [31:0] $end
$var wire 32 M" actual_address [31:0] $end
$var reg 32 N" IR [31:0] $end
$var reg 4 O" mem_byteenable [3:0] $end
$var reg 1 % mem_readenable $end
$var reg 32 P" mem_writedata [31:0] $end
$var reg 1 " mem_writeenable $end
$var reg 4 Q" reg_byteenable [3:0] $end
$var reg 32 R" reg_writedata [31:0] $end
$var reg 1 1 reg_writeenable $end
$upscope $end
$scope module r1 $end
$var wire 5 S" addr_rd [4:0] $end
$var wire 5 T" addr_rs [4:0] $end
$var wire 5 U" addr_rt [4:0] $end
$var wire 4 V" byteenable_ld [3:0] $end
$var wire 1 ) clk $end
$var wire 1 X link $end
$var wire 1 K rType $end
$var wire 1 + rst $end
$var wire 2 W" state [1:0] $end
$var wire 32 X" v0 [31:0] $end
$var wire 32 Y" write_data_ALU [31:0] $end
$var wire 32 Z" write_data_PC [31:0] $end
$var wire 32 [" write_data_ld [31:0] $end
$var wire 1 3 write_enable_ALU $end
$var wire 1 2 write_enable_PC $end
$var wire 1 1 write_enable_ld $end
$var reg 4 \" byteenable [3:0] $end
$var reg 32 ]" read_data_1 [31:0] $end
$var reg 32 ^" read_data_2 [31:0] $end
$var reg 5 _" write_addr [4:0] $end
$var reg 32 `" write_data [31:0] $end
$var reg 1 a" write_enable $end
$var integer 32 b" i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b100000 b"
0a"
bx `"
bx _"
b0 ^"
b0 ]"
bx \"
b0 ["
b10111111110000000000000000001000 Z"
b0 Y"
b0 X"
b0 W"
b1111 V"
b0 U"
b0 T"
b0 S"
b0 R"
b1111 Q"
b0 P"
b1111 O"
b0 N"
b0 M"
b10111111110000000000000000000000 L"
b0 K"
b0 J"
b0 I"
b0 H"
b0 G"
b0 F"
bx E"
b0 D"
b10111111110000000000000000000000 C"
0B"
b0 A"
b0 @"
b0 ?"
b0 >"
b0 ="
b0 <"
b0 ;"
b0 :"
b0 9"
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
b0 3"
b0 2"
b0 1"
b0 0"
b0 /"
b0 ."
b0 -"
b0 ,"
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
0&"
0%"
b10111111110000000000000000001000 $"
b10111111110000000000000000000100 #"
b10111111110000000000000000000000 ""
b0 !"
b0 ~
b0 }
b0 |
b0 {
b10111111110000000000000000001000 z
b10111111110000000000000000000000 y
b0 x
b10111111110000000000000000000000 w
0v
0u
b10111111110000000000000000000000 t
0s
0r
0q
0p
0o
0n
0m
0l
0k
0j
0i
b1111 h
b1111 g
b0 f
b0 e
0d
0c
b0 b
b0 a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
0W
0V
0U
0T
0S
0R
0Q
0P
0O
0N
0M
0L
1K
b0 J
b0 I
b0 H
b0 G
0F
0E
b0 D
1C
0B
0A
0@
0?
0>
0=
0<
0;
0:
b0 9
08
07
b0 6
b10111111110000000000000000001000 5
b0 4
13
02
01
b0 0
0/
0.
bx -
x,
1+
bx *
0)
1(
b10111111110000000000000000000000 '
b1111 &
1%
b0 $
b0 #
0"
b0 !
$end
#10
0C
b10000 M"
b10000 K"
b10000 6
b10000 3"
b10000 Y"
b1000000 {
b10000 @"
1u
0K
b1001 ="
b1000010000000000000010000 x
b1000010000000000000010000 ~
b1000010000000000000010000 A"
b10000 ,"
b10000 *"
b10000 +"
b10000 b
b10000 !"
b10000 ."
b10000 ?"
b10000 F"
b1000 G
b1000 :"
b1000 G"
b1000 U"
b1000 H
b1000 ;"
b1000 T"
b1000000010000000000000000010000 #
b10000 '
b10000 t
b10000 L"
b100101000010000000000000010000 a
b100101000010000000000000010000 >"
b100101000010000000000000010000 D"
b100101000010000000000000010000 N"
b1 9
b1 ("
b1 )"
b1 H"
b1 W"
b100101000010000000000000010000 *
b100101000010000000000000010000 -
b100101000010000000000000010000 E"
1)
0+
#20
0)
#30
0%
b1111 \"
b10000 `"
b1000 _"
1a"
bx *
bx -
bx E"
b10 9
b10 ("
b10 )"
b10 H"
b10 W"
1)
#40
0)
#50
b100000 6
b100000 3"
b100000 Y"
1%
b100 #
b10111111110000000000000000000100 '
b10111111110000000000000000000100 t
b10111111110000000000000000000100 L"
b10111111110000000000000000001100 $"
0a"
b10000 e
b10000 |
b10000 /"
b10000 0"
b10000 I"
b10000 ^"
b100000 M"
b10000 f
b10000 }
b10000 1"
b10000 2"
b10000 J"
b10000 ]"
b0 9
b0 ("
b0 )"
b0 H"
b0 W"
b10111111110000000000000000001000 #"
b10111111110000000000000000001100 5
b10111111110000000000000000001100 z
b10111111110000000000000000001100 Z"
b10111111110000000000000000000100 w
b10111111110000000000000000000100 y
b10111111110000000000000000000100 C"
b10111111110000000000000000000100 ""
1)
#60
0)
#70
b11 K"
b11 6
b11 3"
b11 Y"
b1100 {
b0 e
b0 |
b0 /"
b0 0"
b0 I"
b0 ^"
b11 M"
b0 f
b0 }
b0 1"
b0 2"
b0 J"
b0 ]"
b11 @"
b1001010010000000000000011 x
b1001010010000000000000011 ~
b1001010010000000000000011 A"
b11 ,"
b11 *"
b11 +"
b11 b
b11 !"
b11 ."
b11 ?"
b11 F"
b1001 G
b1001 :"
b1001 G"
b1001 U"
b1001 H
b1001 ;"
b1001 T"
b100101001010010000000000000011 a
b100101001010010000000000000011 >"
b100101001010010000000000000011 D"
b100101001010010000000000000011 N"
b1000000010000000000000000000000 #
b0 '
b0 t
b0 L"
b100101001010010000000000000011 *
b100101001010010000000000000011 -
b100101001010010000000000000011 E"
b1 9
b1 ("
b1 )"
b1 H"
b1 W"
1)
#80
0)
#90
b11 `"
b1001 _"
1a"
0%
b10 9
b10 ("
b10 )"
b10 H"
b10 W"
b0 *
b0 -
b0 E"
1)
#100
0)
#110
b110 6
b110 3"
b110 Y"
1%
b1000 #
b10111111110000000000000000001000 '
b10111111110000000000000000001000 t
b10111111110000000000000000001000 L"
b10111111110000000000000000010000 $"
0a"
b11 e
b11 |
b11 /"
b11 0"
b11 I"
b11 ^"
b110 M"
b11 f
b11 }
b11 1"
b11 2"
b11 J"
b11 ]"
b0 9
b0 ("
b0 )"
b0 H"
b0 W"
b10111111110000000000000000001100 #"
b10111111110000000000000000010000 5
b10111111110000000000000000010000 z
b10111111110000000000000000010000 Z"
b10111111110000000000000000001000 w
b10111111110000000000000000001000 y
b10111111110000000000000000001000 C"
b10111111110000000000000000001000 ""
1)
#120
0)
#130
b1 4"
b101 5"
1d
b11010 K"
03
b1101000 {
b101010 M"
b10000 f
b10000 }
b10000 1"
b10000 2"
b10000 J"
b10000 ]"
b11010 @"
0u
1K
b0 ="
b1000010010000000000011010 x
b1000010010000000000011010 ~
b1000010010000000000011010 A"
b11010 ,"
b11010 *"
b11010 +"
b11010 b
b11010 !"
b11010 ."
b11010 ?"
b11010 F"
b1000 H
b1000 ;"
b1000 T"
b1000000010000000000000000101000 #
b101000 '
b101000 t
b101000 L"
b1000010010000000000011010 a
b1000010010000000000011010 >"
b1000010010000000000011010 D"
b1000010010000000000011010 N"
b1 9
b1 ("
b1 )"
b1 H"
b1 W"
b1000010010000000000011010 *
b1000010010000000000011010 -
b1000010010000000000011010 E"
1)
#140
0)
#150
0%
bx *
bx -
bx E"
b10 9
b10 ("
b10 )"
b10 H"
b10 W"
1)
#160
0)
#170
1%
b1100 #
b10111111110000000000000000001100 '
b10111111110000000000000000001100 t
b10111111110000000000000000001100 L"
b10111111110000000000000000010100 $"
b0 9
b0 ("
b0 )"
b0 H"
b0 W"
b10111111110000000000000000010000 #"
b10111111110000000000000000010100 5
b10111111110000000000000000010100 z
b10111111110000000000000000010100 Z"
b10111111110000000000000000001100 w
b10111111110000000000000000001100 y
b10111111110000000000000000001100 C"
b10111111110000000000000000001100 ""
b1 6"
b101 7"
1)
#180
0)
#190
0d
1S
b100000000010000 K"
bx 4"
bx 5"
b10000000001000000 {
b0 e
b0 |
b0 /"
b0 0"
b0 I"
b0 ^"
b100000000010000 M"
b0 f
b0 }
b0 1"
b0 2"
b0 J"
b0 ]"
b10000 @"
b100000000010000 x
b100000000010000 ~
b100000000010000 A"
b100000000010000 ,"
b100000000010000 *"
b100000000010000 +"
b100000000010000 b
b100000000010000 !"
b100000000010000 ."
b100000000010000 ?"
b100000000010000 F"
b1000 J
b1000 <"
b1000 S"
b0 G
b0 :"
b0 G"
b0 U"
b0 H
b0 ;"
b0 T"
b100000000010000 a
b100000000010000 >"
b100000000010000 D"
b100000000010000 N"
b1000000010000000100000000010000 #
b100000000010000 '
b100000000010000 t
b100000000010000 L"
b100000000010000 *
b100000000010000 -
b100000000010000 E"
b1 9
b1 ("
b1 )"
b1 H"
b1 W"
1)
#200
0)
#210
b1 `"
b1000 _"
1a"
0%
b10 9
b10 ("
b10 )"
b10 H"
b10 W"
13
b1 6
b1 3"
b1 Y"
bx *
bx -
bx E"
1)
#220
0)
#230
1%
b10000 #
b10111111110000000000000000010000 '
b10111111110000000000000000010000 t
b10111111110000000000000000010000 L"
b10111111110000000000000000011000 $"
0a"
b0 9
b0 ("
b0 )"
b0 H"
b0 W"
b10111111110000000000000000010100 #"
b10111111110000000000000000011000 5
b10111111110000000000000000011000 z
b10111111110000000000000000011000 Z"
b10111111110000000000000000010000 w
b10111111110000000000000000010000 y
b10111111110000000000000000010000 C"
b10111111110000000000000000010000 ""
1)
#240
0)
#250
0S
1R
b100100000010010 M"
b100100000010010 K"
b10010000001001000 {
b10010 @"
b100100000010010 x
b100100000010010 ~
b100100000010010 A"
b100100000010010 ,"
b100100000010010 *"
b100100000010010 +"
b100100000010010 b
b100100000010010 !"
b100100000010010 ."
b100100000010010 ?"
b100100000010010 F"
b1001 J
b1001 <"
b1001 S"
b1000000010000000100100000010000 #
b100100000010000 '
b100100000010000 t
b100100000010000 L"
b100100000010010 a
b100100000010010 >"
b100100000010010 D"
b100100000010010 N"
b1 9
b1 ("
b1 )"
b1 H"
b1 W"
b100100000010010 *
b100100000010010 -
b100100000010010 E"
1)
#260
0)
#270
0%
b101 `"
b1001 _"
1a"
bx *
bx -
bx E"
b101 6
b101 3"
b101 Y"
b10 9
b10 ("
b10 )"
b10 H"
b10 W"
1)
#280
0)
#290
1%
b10100 #
b10111111110000000000000000010100 '
b10111111110000000000000000010100 t
b10111111110000000000000000010100 L"
b10111111110000000000000000011100 $"
0a"
b0 9
b0 ("
b0 )"
b0 H"
b0 W"
b10111111110000000000000000011000 #"
b10111111110000000000000000011100 5
b10111111110000000000000000011100 z
b10111111110000000000000000011100 Z"
b10111111110000000000000000010100 w
b10111111110000000000000000010100 y
b10111111110000000000000000010100 C"
b10111111110000000000000000010100 ""
1)
#300
0)
#310
03
0R
b0 $"
1%"
b0 M"
b0 K"
b0 {
b0 @"
1`
0K
b10 ="
b0 x
b0 ~
b0 A"
b0 ,"
b0 *"
b0 +"
b0 b
b0 !"
b0 ."
b0 ?"
b0 F"
b0 J
b0 <"
b0 S"
b1000000000000000000000000000 a
b1000000000000000000000000000 >"
b1000000000000000000000000000 D"
b1000000000000000000000000000 N"
b1000000010000000000000000000000 #
b0 '
b0 t
b0 L"
b1000000000000000000000000000 *
b1000000000000000000000000000 -
b1000000000000000000000000000 E"
b1 9
b1 ("
b1 )"
b1 H"
b1 W"
1)
#320
0)
#330
0%
b10 9
b10 ("
b10 )"
b10 H"
b10 W"
b0 *
b0 -
b0 E"
1)
#340
0)
#350
1%
b11000 #
b10111111110000000000000000011000 '
b10111111110000000000000000011000 t
b10111111110000000000000000011000 L"
b0 9
b0 ("
b0 )"
b0 H"
b0 W"
b0 #"
b10111111110000000000000000100000 5
b10111111110000000000000000100000 z
b10111111110000000000000000100000 Z"
b10111111110000000000000000011000 w
b10111111110000000000000000011000 y
b10111111110000000000000000011000 C"
b10111111110000000000000000011000 ""
1)
#360
0)
#370
13
b110 6
b110 3"
b110 Y"
1s
b100 $"
0%"
b1000000100001 K"
b100000010000100 {
b101 e
b101 |
b101 /"
b101 0"
b101 I"
b101 ^"
b1000000100010 M"
b1 f
b1 }
b1 1"
b1 2"
b1 J"
b1 ]"
b100001 @"
0`
1K
b0 ="
b1000010010001000000100001 x
b1000010010001000000100001 ~
b1000010010001000000100001 A"
b1000000100001 ,"
b1000000100001 *"
b1000000100001 +"
b1000000100001 b
b1000000100001 !"
b1000000100001 ."
b1000000100001 ?"
b1000000100001 F"
b10 J
b10 <"
b10 S"
b1001 G
b1001 :"
b1001 G"
b1001 U"
b1000 H
b1000 ;"
b1000 T"
b1000000010000000001000000100000 #
b1000000100000 '
b1000000100000 t
b1000000100000 L"
b1000010010001000000100001 a
b1000010010001000000100001 >"
b1000010010001000000100001 D"
b1000010010001000000100001 N"
b1 9
b1 ("
b1 )"
b1 H"
b1 W"
b1000010010001000000100001 *
b1000010010001000000100001 -
b1000010010001000000100001 E"
1)
#380
0)
#390
0%
b110 `"
b10 _"
1a"
bx *
bx -
bx E"
b10 9
b10 ("
b10 )"
b10 H"
b10 W"
1)
#400
0)
#410
1%
b1000000010000000000000000000000 #
b0 '
b0 t
b0 L"
b1000 $"
0a"
b110 $
b110 I
b110 X"
b0 9
b0 ("
b0 )"
b0 H"
b0 W"
b100 #"
b1000 5
b1000 z
b1000 Z"
b0 w
b0 y
b0 C"
b0 ""
1)
#420
0)
#430
b0 *
b0 -
b0 E"
0(
1)
#440
0)
#450
1)
