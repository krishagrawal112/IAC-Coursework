$date
	Sat Dec  4 16:53:18 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module CPU_with_RAM_tb $end
$var wire 32 ! writedata [31:0] $end
$var wire 1 " write $end
$var wire 32 # register_v0 [31:0] $end
$var wire 32 $ readdata [31:0] $end
$var wire 1 % read $end
$var wire 4 & byteenable [3:0] $end
$var wire 32 ' address [31:0] $end
$var wire 1 ( active $end
$var reg 1 ) clk $end
$var reg 1 * reset $end
$var reg 1 + waitrequest $end
$scope module m1 $end
$var wire 1 ) clk $end
$var wire 1 * reset $end
$var wire 1 + waitrequest $end
$var wire 1 , xorr $end
$var wire 1 - xori $end
$var wire 32 . writedata [31:0] $end
$var wire 1 / write_enable_ld $end
$var wire 1 0 write_enable_PC $end
$var wire 1 1 write_enable_ALU $end
$var wire 32 2 write_data_ld [31:0] $end
$var wire 32 3 write_data_PC [31:0] $end
$var wire 32 4 write_data_ALU [31:0] $end
$var wire 1 " write $end
$var wire 1 5 sw $end
$var wire 1 6 subu $end
$var wire 2 7 state [1:0] $end
$var wire 1 8 srlv $end
$var wire 1 9 srl $end
$var wire 1 : srav $end
$var wire 1 ; sra $end
$var wire 1 < sltu $end
$var wire 1 = sltiu $end
$var wire 1 > slti $end
$var wire 1 ? slt $end
$var wire 1 @ sllv $end
$var wire 1 A sll $end
$var wire 5 B shamt [4:0] $end
$var wire 1 C sh $end
$var wire 1 D sb $end
$var wire 5 E rt [4:0] $end
$var wire 5 F rs [4:0] $end
$var wire 32 G register_v0 [31:0] $end
$var wire 32 H readdata [31:0] $end
$var wire 1 % read $end
$var wire 5 I rd [4:0] $end
$var wire 1 J orr $end
$var wire 1 K ori $end
$var wire 1 L multu $end
$var wire 1 M mult $end
$var wire 1 N mtlo $end
$var wire 1 O mthi $end
$var wire 1 P lwr $end
$var wire 1 Q lwl $end
$var wire 1 R lw $end
$var wire 1 S lui $end
$var wire 1 T link $end
$var wire 1 U lhu $end
$var wire 1 V lh $end
$var wire 1 W lbu $end
$var wire 1 X lb $end
$var wire 1 Y jr $end
$var wire 1 Z jalr $end
$var wire 1 [ jal $end
$var wire 1 \ j $end
$var wire 32 ] instruction [31:0] $end
$var wire 16 ^ immediate [15:0] $end
$var wire 1 _ divu $end
$var wire 1 ` div $end
$var wire 32 a data_rt [31:0] $end
$var wire 32 b data_rs [31:0] $end
$var wire 4 c byteenable_ld [3:0] $end
$var wire 4 d byteenable [3:0] $end
$var wire 1 e bne $end
$var wire 1 f bltzal $end
$var wire 1 g bltz $end
$var wire 1 h blez $end
$var wire 1 i bgtz $end
$var wire 1 j bgezal $end
$var wire 1 k bgez $end
$var wire 1 l beq $end
$var wire 1 m andr $end
$var wire 1 n andi $end
$var wire 1 o addu $end
$var wire 32 p address [31:0] $end
$var wire 1 q addiu $end
$var wire 1 r STALL $end
$var wire 32 s PC [31:0] $end
$var wire 26 t J_address [25:0] $end
$var reg 1 ( active $end
$scope module NXT $end
$var wire 32 u PC_out [31:0] $end
$var wire 1 ) clk $end
$var wire 1 * rst $end
$var wire 32 v write_data_PC [31:0] $end
$var wire 1 w sign_I_im $end
$var wire 32 x r_t [31:0] $end
$var wire 32 y r_s [31:0] $end
$var wire 1 r STALL $end
$var wire 26 z J_intermidiete [25:0] $end
$var wire 1 Y JR $end
$var wire 1 Z JALR $end
$var wire 1 [ JAL $end
$var wire 1 \ J $end
$var wire 16 { I_intermidiete [15:0] $end
$var wire 1 e BNE $end
$var wire 1 f BLTZAL $end
$var wire 1 g BLTZ $end
$var wire 1 h BLEZ $end
$var wire 1 i BGTZ $end
$var wire 1 j BGEZAL $end
$var wire 1 k BGEZ $end
$var wire 1 l BEQ $end
$var reg 32 | PC [31:0] $end
$var reg 1 } jump $end
$var reg 1 ~ jump_addition $end
$var reg 32 !" jump_amount [31:0] $end
$var reg 1 T link $end
$var reg 2 "" state [1:0] $end
$var reg 1 0 write_enable_PC $end
$upscope $end
$scope module a1 $end
$var wire 32 #" data_hi [31:0] $end
$var wire 32 $" data_lo [31:0] $end
$var wire 32 %" zeroim [31:0] $end
$var wire 1 , xorr $end
$var wire 1 - xori $end
$var wire 1 6 subu $end
$var wire 1 8 srlv $end
$var wire 1 9 srl $end
$var wire 1 : srav $end
$var wire 1 ; sra $end
$var wire 1 < sltu $end
$var wire 1 = sltiu $end
$var wire 1 > slti $end
$var wire 1 ? slt $end
$var wire 1 @ sllv $end
$var wire 1 A sll $end
$var wire 32 &" signim [31:0] $end
$var wire 32 '" signedim [31:0] $end
$var wire 5 (" sa [4:0] $end
$var wire 1 J orr $end
$var wire 1 K ori $end
$var wire 1 L multu $end
$var wire 1 M mult $end
$var wire 1 N mtlo $end
$var wire 1 O mthi $end
$var wire 16 )" immediate [15:0] $end
$var wire 1 _ divu $end
$var wire 1 ` div $end
$var wire 1 m andr $end
$var wire 1 n andi $end
$var wire 1 o addu $end
$var wire 1 q addiu $end
$var wire 32 *" Rtsigned [31:0] $end
$var wire 32 +" Rtdata [31:0] $end
$var wire 32 ," Rssigned [31:0] $end
$var wire 32 -" Rsdata [31:0] $end
$var reg 32 ." data [31:0] $end
$var reg 32 /" datahi [31:0] $end
$var reg 32 0" datalo [31:0] $end
$var reg 32 1" hi [31:0] $end
$var reg 32 2" lo [31:0] $end
$var reg 64 3" multi [63:0] $end
$var reg 1 1 reg_writeenable $end
$upscope $end
$scope module d1 $end
$var wire 1 r STALL $end
$var wire 1 o addu $end
$var wire 1 m andr $end
$var wire 1 k bgez $end
$var wire 1 j bgezal $end
$var wire 1 i bgtz $end
$var wire 1 h blez $end
$var wire 1 g bltz $end
$var wire 1 f bltzal $end
$var wire 1 ` div $end
$var wire 1 _ divu $end
$var wire 1 Z jalr $end
$var wire 1 Y jr $end
$var wire 1 4" lmtlo $end
$var wire 1 O mthi $end
$var wire 1 N mtlo $end
$var wire 1 M mult $end
$var wire 1 L multu $end
$var wire 1 J orr $end
$var wire 1 A sll $end
$var wire 1 @ sllv $end
$var wire 1 ? slt $end
$var wire 1 < sltu $end
$var wire 1 ; sra $end
$var wire 1 : srav $end
$var wire 1 9 srl $end
$var wire 1 8 srlv $end
$var wire 1 6 subu $end
$var wire 1 + waitrequest $end
$var wire 1 , xorr $end
$var wire 1 - xori $end
$var wire 1 5 sw $end
$var wire 1 = sltiu $end
$var wire 1 > slti $end
$var wire 5 5" shamt [4:0] $end
$var wire 1 C sh $end
$var wire 1 D sb $end
$var wire 5 6" rt [4:0] $end
$var wire 5 7" rs [4:0] $end
$var wire 5 8" rd [4:0] $end
$var wire 1 9" rType $end
$var wire 1 K ori $end
$var wire 6 :" opcode [5:0] $end
$var wire 1 P lwr $end
$var wire 1 Q lwl $end
$var wire 1 R lw $end
$var wire 1 S lui $end
$var wire 1 U lhu $end
$var wire 1 V lh $end
$var wire 1 W lbu $end
$var wire 1 X lb $end
$var wire 1 [ jal $end
$var wire 1 \ j $end
$var wire 32 ;" instruction [31:0] $end
$var wire 16 <" immediate [15:0] $end
$var wire 6 =" funct [5:0] $end
$var wire 1 e bne $end
$var wire 1 l beq $end
$var wire 1 n andi $end
$var wire 26 >" address [25:0] $end
$var wire 1 q addiu $end
$var reg 1 ?" s $end
$upscope $end
$scope module l1 $end
$var wire 32 @" PC_in [31:0] $end
$var wire 1 ) clk $end
$var wire 32 A" instruction_out [31:0] $end
$var wire 1 X lb $end
$var wire 1 W lbu $end
$var wire 1 V lh $end
$var wire 1 U lhu $end
$var wire 1 S lui $end
$var wire 1 R lw $end
$var wire 1 Q lwl $end
$var wire 1 P lwr $end
$var wire 16 B" offset [15:0] $end
$var wire 5 C" rt [4:0] $end
$var wire 1 D sb $end
$var wire 1 C sh $end
$var wire 2 D" state [1:0] $end
$var wire 1 5 sw $end
$var wire 1 + waitrequest $end
$var wire 32 E" rt_data [31:0] $end
$var wire 32 F" rs_data [31:0] $end
$var wire 32 G" offset_sign_extended [31:0] $end
$var wire 32 H" mem_readdata [31:0] $end
$var wire 32 I" mem_address [31:0] $end
$var wire 32 J" actual_address [31:0] $end
$var reg 32 K" IR [31:0] $end
$var reg 4 L" mem_byteenable [3:0] $end
$var reg 1 % mem_readenable $end
$var reg 32 M" mem_writedata [31:0] $end
$var reg 1 " mem_writeenable $end
$var reg 4 N" reg_byteenable [3:0] $end
$var reg 32 O" reg_writedata [31:0] $end
$var reg 1 / reg_writeenable $end
$upscope $end
$scope module r1 $end
$var wire 5 P" addr_rd [4:0] $end
$var wire 5 Q" addr_rs [4:0] $end
$var wire 5 R" addr_rt [4:0] $end
$var wire 4 S" byteenable_ld [3:0] $end
$var wire 1 ) clk $end
$var wire 1 T link $end
$var wire 1 * rst $end
$var wire 2 T" state [1:0] $end
$var wire 32 U" v0 [31:0] $end
$var wire 32 V" write_data_ALU [31:0] $end
$var wire 32 W" write_data_PC [31:0] $end
$var wire 32 X" write_data_ld [31:0] $end
$var wire 1 1 write_enable_ALU $end
$var wire 1 0 write_enable_PC $end
$var wire 1 / write_enable_ld $end
$var reg 4 Y" byteenable [3:0] $end
$var reg 32 Z" read_data_1 [31:0] $end
$var reg 32 [" read_data_2 [31:0] $end
$var reg 5 \" write_addr [4:0] $end
$var reg 32 ]" write_data [31:0] $end
$var reg 1 ^" write_enable $end
$var integer 32 _" i [31:0] $end
$upscope $end
$upscope $end
$scope module r1 $end
$var wire 32 `" address [31:0] $end
$var wire 1 ) clk $end
$var wire 32 a" write_data [31:0] $end
$var wire 1 " write_enable $end
$var reg 32 b" read_data [31:0] $end
$var integer 32 c" i [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b11000 c"
bx b"
b0 a"
b0 `"
bx _"
0^"
bx ]"
bx \"
bx ["
bx Z"
bx Y"
b0 X"
b100 W"
bx V"
bx U"
b0 T"
b1111 S"
bx R"
bx Q"
bx P"
b0 O"
b1111 N"
b0 M"
b1111 L"
bx K"
bx J"
b0 I"
bx H"
bx G"
bx F"
bx E"
b0 D"
bx C"
bx B"
bx A"
b0 @"
0?"
bx >"
bx ="
bx <"
bx ;"
bx :"
x9"
bx 8"
bx 7"
bx 6"
bx 5"
z4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
bx -"
bx ,"
bx +"
bx *"
bx )"
bx ("
bx '"
bx &"
b0xxxxxxxxxxxxxxxx %"
bx $"
bx #"
b0 ""
b0 !"
0~
0}
b0 |
bx {
bx z
bx y
bx x
0w
b100 v
b0 u
bx t
b0 s
0r
xq
b0 p
xo
xn
xm
xl
xk
xj
xi
xh
xg
xf
xe
b1111 d
b1111 c
bx b
bx a
x`
x_
bx ^
bx ]
x\
x[
xZ
xY
xX
xW
xV
xU
0T
xS
xR
xQ
xP
xO
xN
xM
xL
xK
xJ
bx I
bx H
bx G
bx F
bx E
xD
xC
bx B
xA
x@
x?
x>
x=
x<
x;
x:
x9
x8
b0 7
x6
x5
bx 4
b100 3
b0 2
01
00
0/
b0 .
x-
x,
x+
x*
0)
x(
b0 '
b1111 &
1%
bx $
bx #
0"
b0 !
$end
#1
b1010000 J"
0o
0m
0`
0_
0Z
0Y
0O
0N
0M
0L
0J
0A
0@
0?
0<
0;
0:
09
08
06
0,
b1010000 G"
0k
0j
0i
0h
0g
0f
b0 b
b0 y
b0 ,"
b0 -"
b0 F"
b0 Z"
b10000 ="
0q
0n
0l
0e
0\
0[
0X
0W
0V
0U
0S
1R
0Q
0P
0K
0D
0C
0>
0=
05
0-
09"
b100011 :"
b10000000001010000 t
b10000000001010000 z
b10000000001010000 >"
b1010000 '"
b1010000 %"
b1010000 &"
b1010000 ^
b1010000 {
b1010000 )"
b1010000 <"
b1010000 B"
b1 B
b1 ("
b1 5"
b0 I
b0 8"
b0 P"
b1 E
b1 6"
b1 C"
b1 R"
b0 F
b0 7"
b0 Q"
b1010000 '
b1010000 p
b1010000 I"
b1010000 `"
1%
b10001100000000010000000001010000 ]
b10001100000000010000000001010000 ;"
b10001100000000010000000001010000 A"
b10001100000000010000000001010000 K"
b1 7
b1 ""
b1 D"
b1 T"
b10001100000000010000000001010000 $
b10001100000000010000000001010000 H
b10001100000000010000000001010000 H"
b10001100000000010000000001010000 b"
1)
#2
0)
#3
b1111 Y"
b11110001000100000000000100100011 ]"
b1 \"
1^"
b11110001000100000000000100100011 2
b11110001000100000000000100100011 O"
b11110001000100000000000100100011 X"
1/
0%
b11110001000100000000000100100011 $
b11110001000100000000000100100011 H
b11110001000100000000000100100011 H"
b11110001000100000000000100100011 b"
b10 7
b10 ""
b10 D"
b10 T"
1)
#4
0)
#5
0^"
1%
0/
b100 '
b100 p
b100 I"
b100 `"
b11110001000100000000000100100011 a
b11110001000100000000000100100011 x
b11110001000100000000000100100011 *"
b11110001000100000000000100100011 +"
b11110001000100000000000100100011 E"
b11110001000100000000000100100011 ["
b11110001000100000000000100100011 #
b11110001000100000000000100100011 G
b11110001000100000000000100100011 U"
b0 7
b0 ""
b0 D"
b0 T"
b1000 3
b1000 v
b1000 W"
b100 s
b100 u
b100 @"
b100 |
1)
#6
0)
#7
b1010100 J"
b1010100 G"
bx a
bx x
bx *"
bx +"
bx E"
bx ["
b10100 ="
b100000000001010100 t
b100000000001010100 z
b100000000001010100 >"
b1010100 '"
b1010100 %"
b1010100 &"
b1010100 ^
b1010100 {
b1010100 )"
b1010100 <"
b1010100 B"
b10 E
b10 6"
b10 C"
b10 R"
1%
b10001100000000100000000001010100 ]
b10001100000000100000000001010100 ;"
b10001100000000100000000001010100 A"
b10001100000000100000000001010100 K"
b1010100 '
b1010100 p
b1010100 I"
b1010100 `"
b10001100000000100000000001010100 $
b10001100000000100000000001010100 H
b10001100000000100000000001010100 H"
b10001100000000100000000001010100 b"
b1 7
b1 ""
b1 D"
b1 T"
1)
#8
0)
#9
b1110011111111110000100110000001 ]"
b10 \"
1^"
b1110011111111110000100110000001 2
b1110011111111110000100110000001 O"
b1110011111111110000100110000001 X"
1/
0%
b10 7
b10 ""
b10 D"
b10 T"
b1110011111111110000100110000001 $
b1110011111111110000100110000001 H
b1110011111111110000100110000001 H"
b1110011111111110000100110000001 b"
1)
#10
0)
#11
0^"
1%
0/
b1000 '
b1000 p
b1000 I"
b1000 `"
b1110011111111110000100110000001 a
b1110011111111110000100110000001 x
b1110011111111110000100110000001 *"
b1110011111111110000100110000001 +"
b1110011111111110000100110000001 E"
b1110011111111110000100110000001 ["
b0 7
b0 ""
b0 D"
b0 T"
b1100 3
b1100 v
b1100 W"
b1000 s
b1000 u
b1000 @"
b1000 |
1)
#12
0)
#13
11
b1 4
b1 ."
b1 V"
1?
b1000000101010 G"
b11110001000100000001000101001101 J"
b11110001000100000000000100100011 b
b11110001000100000000000100100011 y
b11110001000100000000000100100011 ,"
b11110001000100000000000100100011 -"
b11110001000100000000000100100011 F"
b11110001000100000000000100100011 Z"
b101010 ="
0R
19"
b0 :"
b1000100001000000101010 t
b1000100001000000101010 z
b1000100001000000101010 >"
b1000000101010 '"
b1000000101010 %"
b1000000101010 &"
b1000000101010 ^
b1000000101010 {
b1000000101010 )"
b1000000101010 <"
b1000000101010 B"
b0 B
b0 ("
b0 5"
b10 I
b10 8"
b10 P"
b1 F
b1 7"
b1 Q"
b11110001000100000001000101001100 '
b11110001000100000001000101001100 p
b11110001000100000001000101001100 I"
b11110001000100000001000101001100 `"
0%
b1000100001000000101010 ]
b1000100001000000101010 ;"
b1000100001000000101010 A"
b1000100001000000101010 K"
b1 7
b1 ""
b1 D"
b1 T"
b1000100001000000101010 $
b1000100001000000101010 H
b1000100001000000101010 H"
b1000100001000000101010 b"
1)
#14
0)
#15
b1 ]"
1^"
bx $
bx H
bx H"
bx b"
b10 7
b10 ""
b10 D"
b10 T"
1)
#16
0)
#17
1%
b1100 '
b1100 p
b1100 I"
b1100 `"
0^"
b1 a
b1 x
b1 *"
b1 +"
b1 E"
b1 ["
b0 7
b0 ""
b0 D"
b0 T"
b10000 3
b10000 v
b10000 W"
b1100 s
b1100 u
b1100 @"
b1100 |
1)
#18
0)
#19
1A
0?
b0 G"
b0 4
b0 ."
b0 V"
b0 a
b0 x
b0 *"
b0 +"
b0 E"
b0 ["
b0 J"
b0 b
b0 y
b0 ,"
b0 -"
b0 F"
b0 Z"
b0 ="
b0 t
b0 z
b0 >"
b0 '"
b0 %"
b0 &"
b0 ^
b0 {
b0 )"
b0 <"
b0 B"
b0 I
b0 8"
b0 P"
b0 E
b0 6"
b0 C"
b0 R"
b0 F
b0 7"
b0 Q"
0%
b0 ]
b0 ;"
b0 A"
b0 K"
b0 '
b0 p
b0 I"
b0 `"
b0 $
b0 H
b0 H"
b0 b"
b1 7
b1 ""
b1 D"
b1 T"
1)
#20
0)
#21
b0 ]"
b0 \"
1^"
b10 7
b10 ""
b10 D"
b10 T"
b10001100000000010000000001010000 $
b10001100000000010000000001010000 H
b10001100000000010000000001010000 H"
b10001100000000010000000001010000 b"
1)
#22
0)
#23
1%
b10000 '
b10000 p
b10000 I"
b10000 `"
0^"
b0 7
b0 ""
b0 D"
b0 T"
b10100 3
b10100 v
b10100 W"
b10000 s
b10000 u
b10000 @"
b10000 |
1)
#24
0)
#25
b0 '
b0 p
b0 I"
b0 `"
0%
b1 7
b1 ""
b1 D"
b1 T"
b0 $
b0 H
b0 H"
b0 b"
1)
#26
0)
#27
1^"
b10001100000000010000000001010000 $
b10001100000000010000000001010000 H
b10001100000000010000000001010000 H"
b10001100000000010000000001010000 b"
b10 7
b10 ""
b10 D"
b10 T"
1)
#28
0)
#29
1%
b10100 '
b10100 p
b10100 I"
b10100 `"
0^"
b0 7
b0 ""
b0 D"
b0 T"
b11000 3
b11000 v
b11000 W"
b10100 s
b10100 u
b10100 @"
b10100 |
1)
#30
0)
